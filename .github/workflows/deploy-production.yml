name: 🚀 Production Deployment
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: 🏗️ Build and push Docker image
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY }}
          docker build -t complianceai:${{ github.sha }} .
          docker tag complianceai:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/complianceai:${{ github.sha }}
          docker tag complianceai:${{ github.sha }} ${{ secrets.ECR_REGISTRY }}/complianceai:latest
          docker push ${{ secrets.ECR_REGISTRY }}/complianceai:${{ github.sha }}
          docker push ${{ secrets.ECR_REGISTRY }}/complianceai:latest

      - name: 🔄 Update ECS service
        run: |
          aws ecs update-service \
            --cluster complianceai-production \
            --service complianceai-service \
            --task-definition complianceai-task:${{ github.run_number }} \
            --force-new-deployment

      - name: 📋 Run database migrations
        run: |
          aws ecs run-task \
            --cluster complianceai-production \
            --task-definition migration-task \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxx],securityGroups=[sg-xxx],assignPublicIp=ENABLED}"

      - name: 🎉 Deployment success notification
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
